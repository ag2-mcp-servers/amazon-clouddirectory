# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:58:07+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query

from models import (
    AccessDeniedException,
    AddFacetToObjectResponse,
    Amazonclouddirectory20170111BatchreadXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111BatchwriteXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111DirectoryCreateXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111DirectoryListPostRequest,
    Amazonclouddirectory20170111FacetAttributesXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111FacetCreateXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111FacetDeleteXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111FacetListXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111FacetXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111FacetXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111IndexAttachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111IndexDetachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111IndexTargetsXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111IndexXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectAttachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectAttributesGetXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectAttributesXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectChildrenXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectDeleteXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectDetachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectFacetsDeleteXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectFacetsXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectIndicesXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectInformationXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectParentpathsXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectParentXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectPolicyXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111ObjectUpdateXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111ObjectXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111PolicyAttachmentXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111PolicyAttachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111PolicyDetachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111PolicyLookupXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111SchemaAppliedPostRequest,
    Amazonclouddirectory20170111SchemaApplyXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111SchemaCreatePutRequest,
    Amazonclouddirectory20170111SchemaDevelopmentPostRequest,
    Amazonclouddirectory20170111SchemaGetappliedschemaPostRequest,
    Amazonclouddirectory20170111SchemaJsonXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111SchemaManagedPostRequest,
    Amazonclouddirectory20170111SchemaPublishedPostRequest,
    Amazonclouddirectory20170111SchemaPublishXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111SchemaUpdateXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111SchemaUpgradeappliedPutRequest,
    Amazonclouddirectory20170111SchemaUpgradepublishedPutRequest,
    Amazonclouddirectory20170111TagsAddPutRequest,
    Amazonclouddirectory20170111TagsPostRequest,
    Amazonclouddirectory20170111TagsRemovePutRequest,
    Amazonclouddirectory20170111TypedlinkAttachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111TypedlinkAttributesGetXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111TypedlinkAttributesUpdateXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111TypedlinkDetachXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111TypedlinkFacetAttributesXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111TypedlinkFacetCreateXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111TypedlinkFacetDeleteXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111TypedlinkFacetGetXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111TypedlinkFacetListXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111TypedlinkFacetXAmzDataPartitionPutRequest,
    Amazonclouddirectory20170111TypedlinkIncomingXAmzDataPartitionPostRequest,
    Amazonclouddirectory20170111TypedlinkOutgoingXAmzDataPartitionPostRequest,
    ApplySchemaResponse,
    AttachObjectResponse,
    AttachPolicyResponse,
    AttachToIndexResponse,
    AttachTypedLinkResponse,
    BatchReadResponse,
    BatchWriteException,
    BatchWriteResponse,
    CannotListParentOfRootException,
    CreateDirectoryResponse,
    CreateFacetResponse,
    CreateIndexResponse,
    CreateObjectResponse,
    CreateSchemaResponse,
    CreateTypedLinkFacetResponse,
    DeleteDirectoryResponse,
    DeleteFacetResponse,
    DeleteObjectResponse,
    DeleteSchemaResponse,
    DeleteTypedLinkFacetResponse,
    DetachFromIndexResponse,
    DetachObjectResponse,
    DetachPolicyResponse,
    DirectoryAlreadyExistsException,
    DirectoryDeletedException,
    DirectoryNotDisabledException,
    DirectoryNotEnabledException,
    DisableDirectoryResponse,
    EnableDirectoryResponse,
    FacetAlreadyExistsException,
    FacetInUseException,
    FacetNotFoundException,
    FacetValidationException,
    GetAppliedSchemaVersionResponse,
    GetDirectoryResponse,
    GetFacetResponse,
    GetLinkAttributesResponse,
    GetObjectAttributesResponse,
    GetObjectInformationResponse,
    GetSchemaAsJsonResponse,
    GetTypedLinkFacetInformationResponse,
    IncompatibleSchemaException,
    IndexedAttributeMissingException,
    InternalServiceException,
    InvalidArnException,
    InvalidAttachmentException,
    InvalidFacetUpdateException,
    InvalidNextTokenException,
    InvalidRuleException,
    InvalidSchemaDocException,
    InvalidTaggingRequestException,
    LimitExceededException,
    LinkNameAlreadyInUseException,
    ListAppliedSchemaArnsResponse,
    ListAttachedIndicesResponse,
    ListDevelopmentSchemaArnsResponse,
    ListDirectoriesResponse,
    ListFacetAttributesResponse,
    ListFacetNamesResponse,
    ListIncomingTypedLinksResponse,
    ListIndexResponse,
    ListManagedSchemaArnsResponse,
    ListObjectAttributesResponse,
    ListObjectChildrenResponse,
    ListObjectParentPathsResponse,
    ListObjectParentsResponse,
    ListObjectPoliciesResponse,
    ListOutgoingTypedLinksResponse,
    ListPolicyAttachmentsResponse,
    ListPublishedSchemaArnsResponse,
    ListTagsForResourceResponse,
    ListTypedLinkFacetAttributesResponse,
    ListTypedLinkFacetNamesResponse,
    LookupPolicyResponse,
    NotIndexException,
    NotNodeException,
    NotPolicyException,
    ObjectAlreadyDetachedException,
    ObjectNotDetachedException,
    PublishSchemaResponse,
    PutSchemaFromJsonResponse,
    RemoveFacetFromObjectResponse,
    ResourceNotFoundException,
    RetryableConflictException,
    SchemaAlreadyExistsException,
    SchemaAlreadyPublishedException,
    StillContainsLinksException,
    TagResourceResponse,
    UnsupportedIndexTypeException,
    UntagResourceResponse,
    UpdateFacetResponse,
    UpdateLinkAttributesResponse,
    UpdateObjectAttributesResponse,
    UpdateSchemaResponse,
    UpdateTypedLinkFacetResponse,
    UpgradeAppliedSchemaResponse,
    UpgradePublishedSchemaResponse,
    ValidationException,
    XAmzConsistencyLevel,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href="https://aws.amazon.com/directoryservice/">AWS Directory Service</a> and the <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html">Amazon Cloud Directory Developer Guide</a>.</p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon CloudDirectory',
    version='2017-01-11',
    servers=[
        {
            'description': 'The Amazon CloudDirectory multi-region endpoint',
            'url': 'http://clouddirectory.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon CloudDirectory multi-region endpoint',
            'url': 'https://clouddirectory.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://clouddirectory.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://clouddirectory.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.post(
    '/amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition',
    description=""" Performs all the read operations in a batch.  """,
    tags=['batch_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_read(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111BatchreadXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition',
    description=""" Performs all the write operations in a batch. Either all the operations succeed or none. """,
    tags=['batch_operations', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_write(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111BatchwriteXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/directory#x-amz-data-partition',
    description=""" Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_directory(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition',
    description=""" <p>Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.</p> <p>You can also quickly create a directory using a managed schema, called the <code>QuickStartSchema</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html">Managed Schema</a> in the <i>Amazon Cloud Directory Developer Guide</i>.</p> """,
    tags=['directory_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_directory(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111DirectoryCreateXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition',
    description=""" Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def disable_directory(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition',
    description=""" Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def enable_directory(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition',
    description=""" Retrieves metadata about a directory. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_directory(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/directory/list',
    description=""" Lists directories created within an account. """,
    tags=['directory_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_directories(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111DirectoryListPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition',
    description=""" Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema facets -- published, development, or applied. """,
    tags=['facet_management', 'object_management', 'schema_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111FacetXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition',
    description=""" <p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol> """,
    tags=['object_management', 'facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111FacetXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition',
    description=""" Retrieves attributes attached to the facet. """,
    tags=['object_management', 'object_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_facet_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111FacetAttributesXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition',
    description=""" Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas. """,
    tags=['directory_management', 'facet_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111FacetCreateXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition',
    description=""" Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s that are associated with the facet will be deleted. Only development schema facets are allowed deletion. """,
    tags=['directory_management', 'facet_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111FacetDeleteXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition',
    description=""" Retrieves the names of facets that exist in a schema. """,
    tags=['facet_management', 'object_management', 'object_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_facet_names(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111FacetListXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/index#x-amz-data-partition',
    description=""" Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html">Indexing and search</a> for more information. """,
    tags=['directory_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_index(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111IndexXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition',
    description=""" Attaches the specified object to the specified index. """,
    tags=['index_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def attach_to_index(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111IndexAttachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition',
    description=""" Detaches the specified object from the specified index. """,
    tags=['index_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detach_from_index(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111IndexDetachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition',
    description=""" Lists objects attached to the specified index. """,
    tags=['directory_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_index(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111IndexTargetsXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object#x-amz-data-partition',
    description=""" Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet.  """,
    tags=['object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_object(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition',
    description=""" <p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol> """,
    tags=['object_management', 'object_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def attach_object(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectAttachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition',
    description=""" Lists all attributes that are associated with an object.  """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_object_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectAttributesXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition',
    description=""" Retrieves attributes within a facet that are associated with an object. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_object_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectAttributesGetXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition',
    description=""" Returns a paginated list of child objects that are associated with a given object. """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_object_children(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectChildrenXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition',
    description=""" Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>. """,
    tags=['object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_object(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectDeleteXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition',
    description=""" Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name. """,
    tags=['object_management', 'object_facet_management', 'tagging_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detach_object(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectDetachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition',
    description=""" Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it. """,
    tags=['object_management', 'object_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_facet_to_object(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectFacetsXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition',
    description=""" Removes the specified facet from the specified object. """,
    tags=['object_management', 'object_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_facet_from_object(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectFacetsDeleteXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition',
    description=""" Lists indices attached to the specified object. """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_attached_indices(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectIndicesXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition',
    description=""" Retrieves metadata about an object. """,
    tags=['object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_object_information(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectInformationXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition',
    description=""" Lists parent objects that are associated with a given object in pagination fashion. """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_object_parents(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectParentXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition',
    description=""" <p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.</p> """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_object_parent_paths(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectParentpathsXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition',
    description=""" Returns policies attached to an object in pagination fashion. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_object_policies(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectPolicyXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition',
    description=""" Updates a given object's attributes. """,
    tags=['object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_object_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111ObjectUpdateXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition',
    description=""" Attaches a policy object to a regular object. An object can have a limited number of attached policies. """,
    tags=['policy_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def attach_policy(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111PolicyAttachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition',
    description=""" Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_policy_attachments(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x_amz_consistency_level: Optional[XAmzConsistencyLevel] = Header(
        None, alias='x-amz-consistency-level'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111PolicyAttachmentXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition',
    description=""" Detaches a policy from an object. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detach_policy(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111PolicyDetachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition',
    description=""" Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>. """,
    tags=['policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def lookup_policy(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111PolicyLookupXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema#x-amz-data-partition',
    description=""" Deletes a given schema. Schemas in a development and published state can only be deleted.  """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_schema(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/schema/applied',
    description=""" Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version. """,
    tags=['directory_management', 'schema_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_applied_schema_arns(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaAppliedPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition',
    description=""" Copies the input published schema, at the specified version, into the <a>Directory</a> with the same name and version as that of the published schema. """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def apply_schema(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaApplyXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/create',
    description=""" <p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul> """,
    tags=['directory_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_schema(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaCreatePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/schema/development',
    description=""" Retrieves each Amazon Resource Name (ARN) of schemas in the development state. """,
    tags=['schema_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_development_schema_arns(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaDevelopmentPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/schema/getappliedschema',
    description=""" Returns current applied schema version ARN, including the minor version in use. """,
    tags=['schema_management', 'facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_applied_schema_version(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaGetappliedschemaPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition',
    description=""" Retrieves a JSON representation of the schema. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information. """,
    tags=['object_management', 'policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_schema_as_json(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition',
    description=""" Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information. """,
    tags=['object_management', 'object_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_schema_from_json(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaJsonXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/schema/managed',
    description=""" Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead. """,
    tags=['directory_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_managed_schema_arns(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaManagedPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition',
    description=""" Publishes a development schema with a major version and a recommended minor version. """,
    tags=['directory_management', 'schema_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def publish_schema(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaPublishXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/schema/published',
    description=""" Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead. """,
    tags=['directory_management', 'object_management', 'schema_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_published_schema_arns(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaPublishedPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition',
    description=""" Updates the schema name with a new name. Only development schema names can be updated. """,
    tags=['directory_management', 'object_management', 'schema_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_schema(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaUpdateXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/upgradeapplied',
    description=""" Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory. """,
    tags=['directory_management', 'schema_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def upgrade_applied_schema(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaUpgradeappliedPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/schema/upgradepublished',
    description=""" Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>. """,
    tags=['object_management', 'directory_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def upgrade_published_schema(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111SchemaUpgradepublishedPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/tags',
    description=""" Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call. """,
    tags=['object_management', 'tagging_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TagsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/tags/add',
    description=""" An API operation for adding tags to a resource. """,
    tags=['directory_management', 'object_management', 'tagging_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TagsAddPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/tags/remove',
    description=""" An API operation for removing tags from a resource. """,
    tags=['object_management', 'tagging_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TagsRemovePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition',
    description=""" Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['link_management', 'typed_link_facet_management', 'typed_link_listing'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def attach_typed_link(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkAttachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition',
    description=""" Retrieves attributes that are associated with a typed link. """,
    tags=['link_management', 'typed_link_facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_link_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkAttributesGetXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition',
    description=""" Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>. """,
    tags=['link_management', 'typed_link_facet_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_link_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkAttributesUpdateXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition',
    description=""" Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['link_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detach_typed_link(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkDetachXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition',
    description=""" Updates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['typed_link_facet_management', 'typed_link_listing'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_typed_link_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkFacetXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition',
    description=""" Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['link_management', 'typed_link_facet_management', 'typed_link_listing'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_typed_link_facet_attributes(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkFacetAttributesXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition',
    description=""" Creates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=[
        'link_management',
        'typed_link_facet_management',
        'object_relationship_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_typed_link_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkFacetCreateXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition',
    description=""" Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['object_facet_management', 'typed_link_facet_management', 'facet_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_typed_link_facet(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkFacetDeleteXAmzDataPartitionPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition',
    description=""" Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['link_management', 'typed_link_facet_management', 'object_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_typed_link_facet_information(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkFacetGetXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition',
    description=""" Returns a paginated list of <code>TypedLink</code> facet names for a particular schema. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['batch_operations', 'link_management', 'typed_link_listing'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_typed_link_facet_names(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkFacetListXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition',
    description=""" Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['link_management', 'typed_link_facet_management', 'typed_link_listing'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_incoming_typed_links(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkIncomingXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition',
    description=""" Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>. """,
    tags=['object_management', 'link_management', 'typed_link_listing'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_outgoing_typed_links(
    x_amz_data_partition: str = Header(..., alias='x-amz-data-partition'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Amazonclouddirectory20170111TypedlinkOutgoingXAmzDataPartitionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
